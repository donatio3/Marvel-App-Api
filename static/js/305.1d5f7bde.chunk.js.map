{"version":3,"file":"static/js/305.1d5f7bde.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicsPage.js","components/skeleton/Skeleton.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', \n        objectFit:'contain', margin: '0 auto'}} src={error} alt='error' />\n    )\n}\n\nexport default ErrorMessage;","import xMen from '../../resources/img/x-men.png';\nimport './singleComic.scss'\nimport { useState, useEffect } from \"react\";\n\nimport Spinner from '../spiner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../services/MarvelService\";\nimport {useParams, Link} from 'react-router-dom'\n\n\nconst SingleComicPage = () => {\n    const {comicId} = useParams()\n    const [comic, setComic] = useState(null)\n\n    const {loading, error, getComic, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateComic();    \n    }, [comicId])\n    \n\n    const updateComic = () => {\n        clearError() // очищаем ошибку чтобы если была ошибка, можно было нажать на другого персонажа\n       \n        getComic(comicId)\n            .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic)\n    }\n\n\n    const loadingSpinner = loading ? <Spinner/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null\n \n    return (\n        <>\n            {loadingSpinner}\n            {errorMessage}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    \n    const {thumbnail, title, description, pageCount, price, language} = comic\n\n    return (\n        <>\n            <div className=\"single-comic\">\n                <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n                <div className=\"single-comic__info\">\n                    <h2 className=\"single-comic__name\">{title}</h2>\n                    <p className=\"single-comic__descr\">{description}</p>\n                    <p className=\"single-comic__descr\">{pageCount}</p>\n                    <p className=\"single-comic__descr\">{language}</p>\n                    <div className=\"single-comic__price\">{price}</div>\n                </div>\n                <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n            </div>\n            \n\n        </>\n    )\n}\n\nexport default SingleComicPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useCallback} from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        setLoading(true)\n        \n        try {  // вместо then и catch используем try/catch\n            const response = await fetch(url, {method, headers, body}) \n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json()\n\n            setLoading(false)\n            return data\n\n        } catch(e) {\n            setLoading(false)\n            setError(e.message) // сообщение ошибки\n            throw e;    \n        }  \n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n    \n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp() // ДОСТАЕМ СУЩНОСТИ ИЗ ХУКА\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\n    const _apiKey = 'apikey=155cbf6df8687e9fab7f432f4bf06609    ';\n    const _basicOffset = 210;\n\n    const getAllCharacters = async (offset = _basicOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map((char) => _transformCharacter(char))\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0])\n    }\n\n\n    const getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformCharacter = (char) => {\n            return {\n                id: char.id,\n                name: char.name,\n                description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n                homepage: char.urls[0].url,\n                wiki: char.urls[1].url,\n                comics: char.comics.items,\n            }\n    }\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\n\n    return {error, loading, getAllCharacters, getCharacter, getAllComics,\n\t\tgetComic, clearError}\n\n}\n\nexport default useMarvelService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// getAllCharacters = () => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     return this.getResourse(`${this._apiBase}characters?limit=9&offset=210&${this._apiKey}`);\n// } \n\n// getCharacter = async (id) => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     const res = await this.getResourse(`${this._apiBase}characters/${id}?${this._apiKey}`);\n//     return this._transformCharacter\n// } \n\n// _transformCharacter = (res) => { // ТРАНСФОРМАЦИЯ ДАННЫХ\n//     return { // ПРИХОДИТ БОЛЬШОЙ ОБЬЕКТ. ВОЗВРАЩАЕМ ОБЬЕКТ С НУЖНЫМИ СВОЙТСВАМИ \n//         name: res.data.results[0].name,\n//         description: res.data.results[0].description,\n//         thumbnail: res.data.results[0].thumbnail.path + '.' + res.data.results[0].thumbnail.extension  , // превью\n//         homepage: res.data.results[0].urls[0].url ,\n//         wiki: res.data.results[0].urls[1].url\n//     }    \n// }"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","alt","View","_ref","comic","thumbnail","title","description","pageCount","price","language","_Fragment","children","_jsxs","className","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","loadingSpinner","Spinner","errorMessage","content","Skeleton","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}