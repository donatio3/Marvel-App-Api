{"version":3,"file":"static/js/526.45853d00.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', \n        objectFit:'contain', margin: '0 auto'}} src={error} alt='error' />\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect, useCallback } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport useMarvelService from \"../../services/MarvelService\"\n\nimport avengers from '../../resources/img/Avengers.png'\nimport avengersLogo from '../../resources/img/Avengers logo.png'\nimport xMen from '../../resources/img/x-men.png';\n\nimport './comics.scss'\nimport Spinner from \"../spiner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([])\n    const [offset, setOffset] = useState(9)\n    const {loading, error, getComics, getAllComics} = useMarvelService()\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [endedChar, setEndedChar] = useState(false)\n\n    useEffect(() => {\n        loadComics(offset, true)\n    }, [])\n\n    const loadComics = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n\n        getAllComics(offset)\n        .then(updateComics)\n        setOffset(offset => offset + 9)\n    }\n    \n    const updateComics = (res) => {\n        if (res.length < 8) {\n            setEndedChar(true)\n        }\n\n        setComicsList(comicsList => [...comicsList, ...res])\n        setNewItemLoading(false)\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item) => {\n            return (\n                <li className=\"comics__item\" key={item.id}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(comicsList)\n\n    const loadingSpinner = loading && !newItemLoading ? <Spinner/> : null\n    const errorMessage = error ? <ErrorMessage/> : null\n    const content = items ? items : null\n\n    return (\n        <>\n            <div className=\"comics\">\n                <div className=\"comics__header\">\n                    <div className=\"icon-heroes\">\n                        <img src={avengers} alt=\"avengers heroes\" />\n                    </div>\n\n                    <div className=\"descr\">\n                    New comics every week! <br/> Stay tuned!\n                    </div>\n\n                    <div className=\"icon-avengers\">\n                        <img src={avengersLogo} alt=\"logo\" />\n                    </div>\n                </div>\n\n\n                <div className=\"comics__list\">\n                    <div className=\"comics__grid\">\n                        {content}\n                        {loadingSpinner}\n                        {errorMessage}\n                    </div>\n                </div>\n\n                <button style={{display: endedChar ? 'block' : 'none'}} disabled={newItemLoading} onClick={() => loadComics(null, false)} className=\"button button__main button__long\">\n                    <div className=\"inner\">load more</div>\n                </button>    \n            </div>       \n        </>\n    )\n\n}\n\nexport default ComicsList","import ComicsList from \"../comicsList/ComicsList\"\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsList","import {useState, useCallback} from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        setLoading(true)\n        \n        try {  // вместо then и catch используем try/catch\n            const response = await fetch(url, {method, headers, body}) \n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json()\n\n            setLoading(false)\n            return data\n\n        } catch(e) {\n            setLoading(false)\n            setError(e.message) // сообщение ошибки\n            throw e;    \n        }  \n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n    \n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp() // ДОСТАЕМ СУЩНОСТИ ИЗ ХУКА\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\n    const _apiKey = 'apikey=155cbf6df8687e9fab7f432f4bf06609    ';\n    const _basicOffset = 210;\n\n    const getAllCharacters = async (offset = _basicOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map((char) => _transformCharacter(char))\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0])\n    }\n\n\n    const getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformCharacter = (char) => {\n            return {\n                id: char.id,\n                name: char.name,\n                description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n                homepage: char.urls[0].url,\n                wiki: char.urls[1].url,\n                comics: char.comics.items,\n            }\n    }\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\n\n    return {error, loading, getAllCharacters, getCharacter, getAllComics,\n\t\tgetComic, clearError}\n\n}\n\nexport default useMarvelService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// getAllCharacters = () => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     return this.getResourse(`${this._apiBase}characters?limit=9&offset=210&${this._apiKey}`);\n// } \n\n// getCharacter = async (id) => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     const res = await this.getResourse(`${this._apiBase}characters/${id}?${this._apiKey}`);\n//     return this._transformCharacter\n// } \n\n// _transformCharacter = (res) => { // ТРАНСФОРМАЦИЯ ДАННЫХ\n//     return { // ПРИХОДИТ БОЛЬШОЙ ОБЬЕКТ. ВОЗВРАЩАЕМ ОБЬЕКТ С НУЖНЫМИ СВОЙТСВАМИ \n//         name: res.data.results[0].name,\n//         description: res.data.results[0].description,\n//         thumbnail: res.data.results[0].thumbnail.path + '.' + res.data.results[0].thumbnail.extension  , // превью\n//         homepage: res.data.results[0].urls[0].url ,\n//         wiki: res.data.results[0].urls[1].url\n//     }    \n// }"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","alt","ComicsList","comicsList","setComicsList","useState","offset","setOffset","loading","getComics","getAllComics","useMarvelService","newItemLoading","setNewItemLoading","endedChar","setEndedChar","useEffect","loadComics","initial","then","updateComics","res","length","items","arr","map","item","className","children","_jsxs","Link","to","concat","id","thumbnail","title","price","renderItems","loadingSpinner","Spinner","errorMessage","content","_Fragment","avengers","avengersLogo","disabled","onClick","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","getComic"],"sourceRoot":""}