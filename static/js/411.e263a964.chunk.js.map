{"version":3,"file":"static/js/411.e263a964.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import error from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', \n        objectFit:'contain', margin: '0 auto'}} src={error} alt='error' />\n    )\n}\n\nexport default ErrorMessage;","import './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport {useEffect, useState} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spiner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, clearError, getAllCharacters, getCharacter} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar\n\n","import './charList.scss';\nimport abyss from '../../resources/img/abyss.jpg';\n\nimport React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spiner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([])\n   \n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(1000)\n\n    const {loading, error, getAllCharacters} = useMarvelService()\n    const myRef = React.createRef()\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }   \n\n    const onCharListLoaded = (newCharList) => {\n        // const {logger, secondLog} = await import('./someFunc')\n        // logger();\n        const endedCharList = newCharList.length > 0 ? false : true \n    \n        setCharList(charList => [...charList, ...newCharList])\n        setNewItemLoading(endedCharList)\n        setOffset(offset => offset + 9)\n    }\n        \n\n    \n    const itemsRef = useRef([])\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n\n\n        itemsRef.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRef.current[id].classList.add('char__item_selected');\n        itemsRef.current[id].focus();\n    }\n\n    \n    function renderItems(arr) {\n        // console.log('LOAD LIST FROM RENDER', arr)\n        \n        const duration = 300;\n\n        const defaultStyle = {\n            transition: `opacity ${duration}ms ease-in-out`,\n            opacity: 0,\n        }\n\n        const transitionStyles = {\n            entering: { opacity: 1, visibility: 'visible'},\n            entered:  { opacity: 1, visibility: 'visible'},\n            exiting:  { opacity: 0, visibility: 'hidden'},\n            exited:  { opacity: 0, visibility: 'hidden'},\n        };\n\n        const elements = arr.map((item, i) => {\n            \n            let imgStyle = {'objectFit': 'cover'}\n            if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {'objectFit': 'contain'}\n            }\n\n\n            return (\n                        <li tabIndex={0} \n                            key={item.id}\n                            ref={el => itemsRef.current[i] = el} // в массив itemsRef складываем ссылки на элементы\n                            className={\"char__item\"}\n                            onClick={() => {\n                                props.onCharSelected(item.id)\n                                focusOnItem(i)\n                            }}\n                            >\n\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                        </li>\n                    )\n        })\n\n        return (\n            <ul className='char__grid'>\n                {elements}\n            </ul>\n        )\n    }\n\n        const items = renderItems(charList)\n\n        const loadingSpinner = loading && !newItemLoading ? <Spinner/> : null\n        const errorMessage = error ? <ErrorMessage/> : null\n        \n        \n        return (\n            <div className=\"char__list\">\n                <ul className=\"char__grid\">\n                    {errorMessage}\n                    {loadingSpinner}\n                    {items}\n                </ul>\n\n                <button disabled={newItemLoading} onClick={() => {\n                    onRequest(offset, false)\n                }} className=\"button button__main button__long\">\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\n\n\nexport default CharList;","import { useState, useEffect } from \"react\";\nimport './charInfo.scss';\n\nimport Spinner from '../spiner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nconst CharInfo = (props) =>  {\n    const [char, setChar] = useState(null)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar();    \n    }, [props])\n\n    // componentDidUpdate(prevProps) {\n    //     if (props.charId !== prevProps.charId) {\n    //         updateChar();\n    //     }\n    // }\n    \n\n    const updateChar = () => {\n        clearError() // очищаем ошибку чтобы если была ошибка, можно было нажать на другого персонажа\n        const charId = props.charId\n\n        if (!charId) return \n\n        getCharacter(charId)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (char) => {\n        setChar(char)\n    }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\n        return (\n            <div className=\"char__info\">\n                {content}\n                {errorMessage}\n                {spinner}\n                {skeleton}\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    return (\n            <>\n                <div className=\"char__basics\">\n                    <img style={imgStyle} src={thumbnail} alt=\"abyss\"/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"char__descr\">\n                    {description}                \n                </div>\n\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : <h2>There are no comics</h2>}\n                    {\n                        comics.map((item, i) => {\n                            if (i < 9) {\n                                const comicId = item.resourceURI.slice(43)\n                                return (\n                                    <Link to={`/comics/${comicId}`} key={i} className=\"char__comics-item\">\n                                        {item.name}\n                                    </Link>\n                                )\n                            }\n                         })\n                    }\n                </ul>\n            </>\n    )\n}\n\n\nexport default CharInfo;","import { Component } from \"react\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // static getDerivedStateFromError(error) { // он только обновляет состояние\n    //     return {error: true}\n    // }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n\n        this.setState({\n            error: true\n        })\n    }\n\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children; // компонент переданный вовнутрь этого компонента\n    }\n}\n\nexport default ErrorBoundary","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null)\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n\n    return (\n        <>\n            <ErrorBoundary> \n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>    \n                    \n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n        </>\n    )\n}\n\nexport default MainPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useCallback} from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        setLoading(true)\n        \n        try {  // вместо then и catch используем try/catch\n            const response = await fetch(url, {method, headers, body}) \n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json()\n\n            setLoading(false)\n            return data\n\n        } catch(e) {\n            setLoading(false)\n            setError(e.message) // сообщение ошибки\n            throw e;    \n        }  \n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n    \n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, error, request, clearError} = useHttp() // ДОСТАЕМ СУЩНОСТИ ИЗ ХУКА\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\n    const _apiKey = 'apikey=155cbf6df8687e9fab7f432f4bf06609    ';\n    const _basicOffset = 210;\n\n    const getAllCharacters = async (offset = _basicOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map((char) => _transformCharacter(char))\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0])\n    }\n\n\n    const getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformCharacter = (char) => {\n            return {\n                id: char.id,\n                name: char.name,\n                description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n                homepage: char.urls[0].url,\n                wiki: char.urls[1].url,\n                comics: char.comics.items,\n            }\n    }\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\n\n    return {error, loading, getAllCharacters, getCharacter, getAllComics,\n\t\tgetComic, clearError}\n\n}\n\nexport default useMarvelService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// getAllCharacters = () => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     return this.getResourse(`${this._apiBase}characters?limit=9&offset=210&${this._apiKey}`);\n// } \n\n// getCharacter = async (id) => { // ПОЛУЧАЕМ ВСЕХ ПЕРСОНАЖЕЙ \n//     const res = await this.getResourse(`${this._apiBase}characters/${id}?${this._apiKey}`);\n//     return this._transformCharacter\n// } \n\n// _transformCharacter = (res) => { // ТРАНСФОРМАЦИЯ ДАННЫХ\n//     return { // ПРИХОДИТ БОЛЬШОЙ ОБЬЕКТ. ВОЗВРАЩАЕМ ОБЬЕКТ С НУЖНЫМИ СВОЙТСВАМИ \n//         name: res.data.results[0].name,\n//         description: res.data.results[0].description,\n//         thumbnail: res.data.results[0].thumbnail.path + '.' + res.data.results[0].thumbnail.extension  , // превью\n//         homepage: res.data.results[0].urls[0].url ,\n//         wiki: res.data.results[0].urls[1].url\n//     }    \n// }"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","error","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","clearError","getAllCharacters","getCharacter","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","onRequest","initial","onCharListLoaded","newCharList","endedCharList","length","itemsRef","useRef","items","arr","concat","elements","map","item","i","tabIndex","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","renderItems","loadingSpinner","disabled","comics","_Fragment","comicId","resourceURI","slice","Link","to","charId","skeleton","Skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}